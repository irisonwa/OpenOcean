#version 460 core

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

#define NUM_BOID_TYPES 11

struct Boid {
    // todo: recalculate bytes
    vec4 pos;                             // 4 * 4      # 16
    vec4 velocity;                        // 4 * 4      # 32
    vec4 lastVelocity;                    // 4 * 4      # 48
    vec4 dir;                             // 4 * 4      # 64
    vec4 scale;                           // 4 * 4      # 80
    vec4 currentHome;                     // 4 * 4      # 96
    vec2 bounds;                          // 2 * 4      # 104
    float min_speed;                      // 4          # 108
    float max_speed;                      // 4          # 112
    float minSepDistance;                 // 4          # 116
    float matchingFactor;                 // 4          # 120
    float centeringFactor;                // 4          # 124
    float avoidFactor;                    // 4          # 128
    float minEnemyInterceptDistance;      // 4          # 132
    float minEnemyChaseDistance;          // 4          # 136
    float fearWeight;                     // 4          # 140
    float goalWeight;                     // 4          # 144
    int canHaveHome;                      // 4          # 192
    int hasHome;                          // 4          # 240
    int isBeingChased;                    // 4          # 244
    int isChasing;                        // 4          # 248
    int boidsAround;                      // 4          # 252
    uint type;                            // 4          # 256
    uint ID;                              // 4          # 260
    uint myPredators[NUM_BOID_TYPES+1];   // 4 * 12     # 308
    uint myPrey[NUM_BOID_TYPES+1];        // 4 * 12     # 356
};

uint F_THREADFIN = 0;
uint F_MARLIN = 1;
uint F_SPEAR_FISH = 2;
uint F_HERRING = 3;
uint F_CLOWNFISH = 4;
uint S_BLUE = 5;
uint S_WHALE = 6;
uint S_WHITE = 7;
uint WHALE = 8;
uint DOLPHIN = 9;
uint PLANKTON = 10;

float acc = 8; // acceleration

float sq(float s) { return s * s; }
float sq(int s) { return s * s; }
mat4 getTranslationMat(vec3 pos);
mat4 getScaleMat(vec3 scale);
float sqDist(vec4 a, vec4 b);
bool isFamily(uint idxa, uint idxb);
bool isPredatorTo(uint idxa, uint idxb);
bool isPreyTo(uint idxa, uint idxb);
bool isNeutral(uint idxa, uint idxb);
float getFearWeight(uint idxa, uint idxb);
void limitSpeed(uint idx);
mat4 getLookAtMat(uint idx);
void constrainBounds(uint idx);
void move(uint idx);
void update(uint idx);
void process(uint idx);
bool checkNan(vec3 v);
bool checkNan(vec4 v);
void resetVelocity(uint bidx);
void checkAndReset(uint bidx);

layout(std430, binding = 3) buffer BoidStructs {
    Boid boids[];
};

layout(std430, binding = 4) buffer readonly HomeLocs {
    vec4 homes[];
};

// layout(std430, binding = 5) buffer BIndices {
//     uint indices[];
// };

layout(std430, binding = 6) buffer writeonly TransOut {
    mat4 transforms[];
};

layout (location = 0) uniform float deltaTime;
layout (location = 1) uniform bool canAttack;
layout (location = 2) uniform vec3 gridSize;
layout (location = 3) uniform float globalSpeedFactor;
layout (location = 4) uniform vec3 updateCentre;
layout (location = 5) uniform float updateDistance;
layout (location = 6) uniform bool resetFlag;

void main() {
    uint rid = gl_GlobalInvocationID.x;
    // uint rid = idBase + gid; // real boid id
    if (rid >= boids.length()) return;

    // only process if inside render distance
    if (sqDist(boids[rid].pos, vec4(updateCentre, 0)) <= sq(updateDistance)) process(rid);
    transforms[rid] = getLookAtMat(rid) * getScaleMat(boids[rid].scale.xyz);
}

// Create a lookAt matrix from a position, direction, and up vector. Taken from GLM
mat4 getLookAtMat(uint idx) {
    vec3 up = vec3(0, 1, 0);
    vec3 from = boids[idx].pos.xyz;
    vec3 to = normalize(boids[idx].lastVelocity.xyz);

    vec3 f = normalize((from + to) - from);
    vec3 s = normalize(cross(f, up));
    vec3 u = cross(s, f);

    mat4 m = mat4(1);
    m[0][0] = s.x;
    m[1][0] = s.y;
    m[2][0] = s.z;
    m[0][1] = u.x;
    m[1][1] = u.y;
    m[2][1] = u.z;
    m[0][2] =-f.x;
    m[1][2] =-f.y;
    m[2][2] =-f.z;
    m[3][0] =-dot(s, from);
    m[3][1] =-dot(u, from);
    m[3][2] = dot(f, from);
    
    mat4 mat = getTranslationMat(from);
    return mat * inverse(m);
}

mat4 getTranslationMat(vec3 pos) {
    mat4 m = mat4(1);
    m[3][0] = pos.x;
    m[3][1] = pos.y;
    m[3][2] = pos.z;
    return m;
}

mat4 getScaleMat(vec3 scale) {
    mat4 m = mat4(1);
    m[0] *= scale[0];
    m[1] *= scale[1];
    m[2] *= scale[2];
    return m;
}

void move(uint idx) {
    int numNeighbors = 0;
    int numFamily = 0; // only move by family rules if near family. otherwise, boid will move towards origin due to subtraction in alignment and cohesion checks
    int numStrangers = 0;

    // alignment variable
    vec4 avgVel = vec4(0);
    vec4 avgStrangerVel = vec4(0);

    // cohesion
    vec4 avgCentre = vec4(0);
    vec4 avgStrangerCentre = vec4(0);

    // separation variables
    vec4 avgMove = vec4(0);
    vec4 avgStrangerMove = vec4(0);
    // if being chased, ignore all prey. define separate attacking and fleeing so that any behaviour defined
    // before fully seen (i.e., deciding to chase before finding a predator in boid list) can be undone
    vec4 avgMoveAtt = vec4(0);
    vec4 avgMoveFlee = vec4(0);

    bool isBeingChased = false;    // am i being chased?
    bool isInPursuit = false;      // am i chasing prey (intercepting or chasing)
    bool isInChasing = false;      // am i chasing prey (chasing only)
    vec4 closestPrey = vec4(1e9);  // chase closest prey instead of group if it's within chase distance
    float closestPreyDist = 1e9;
    float closestPreyDisttmp = 1e9;
    float strangerFactor = 0.1;
    float visibleRange = 8;

    for (int i = 0; i < boids.length(); ++i) {
        // uint odx = (idx + i) % boids.length();
        uint odx = i;
        if (boids[odx].ID == boids[idx].ID) continue;
        float tDist = sqDist(boids[idx].pos, boids[odx].pos);
        if (tDist < sq(visibleRange)) {
            float distFromBoid = sqrt(tDist);
            numNeighbors++;
            // stay within group of same boid type
            if (isFamily(idx, odx)) {
                numFamily++;

                // alignment
                avgVel += boids[odx].velocity;

                // cohesion
                avgCentre += boids[odx].pos;

                // separation
                if (tDist < sq(boids[idx].minSepDistance)) {
                    avgMove += boids[idx].pos - boids[odx].pos;
                }
            } else if (isNeutral(idx, odx)) {
                numStrangers++;

                // alignment
                avgStrangerVel += boids[odx].velocity;

                // cohesion
                avgStrangerCentre += boids[odx].pos;

                // separation
                if (tDist < sq(boids[idx].minSepDistance)) {
                    avgStrangerMove += boids[idx].pos - boids[odx].pos;
                }
            } else if (!canAttack) {
                // to avoid altering if-statement structure
                continue;
            } else {
                if (isPreyTo(idx, odx)) {
                    if (tDist <= sq(boids[idx].minEnemyInterceptDistance)) {
                        isBeingChased = true;
                    }
                    avgMoveFlee += (boids[idx].pos - boids[odx].pos) * getFearWeight(idx, odx);
                } else if (isPredatorTo(idx, odx)) {
                    isInPursuit = isInPursuit || tDist <= sq(boids[idx].minEnemyInterceptDistance);
                    if (tDist <= sq(boids[idx].minEnemyChaseDistance)) {
                        // move towards goal
                        isInChasing = true;
                        if (tDist < sq(closestPreyDist)) {
                            closestPrey = boids[odx].pos;
                            closestPreyDist = tDist;
                        }
                        avgMoveAtt -= (boids[idx].pos - boids[odx].pos) * boids[idx].goalWeight * boids[idx].scale.x;
                    } else if (tDist <= sq(boids[idx].minEnemyInterceptDistance)) {
                        // intercept goal
                        // doing it like this means predators are drawn towards larger groups more than single prey
                        avgMoveAtt -= (boids[idx].pos - (boids[odx].pos + normalize(boids[odx].velocity))) * boids[idx].goalWeight * boids[idx].scale.x;
                    }
                }
            }
        }
    }

    boids[idx].isBeingChased = int(isBeingChased);
    boids[idx].isChasing = int(isInPursuit);
    boids[idx].dir = vec4(-3);

    float restRange = 10; // distance to remain at home
    float homeRange = 40; // distance to consider home the current home
    float newHomeDistDrift = 100; // distance to determine new home when drifting (i.e., not fleeing or chasing)
    float newHomeDistFlee = newHomeDistDrift/4; // distance to determine new home when fleeing
    float closestHomeDist = 1e9;
    // Determine where the closest home is
    boids[idx].hasHome = 0;
    boids[idx].currentHome = vec4(1e9);
    if (boids[idx].canHaveHome == 1) {
        float consideredHomeDistSq = isBeingChased ? sq(newHomeDistFlee) : sq(newHomeDistDrift);
        for (int i = 0; i < homes.length(); ++i) {
            vec4 hm = (homes[i] / 2) + vec4(0, 5, 0, 0);
            float hDist = sqDist(boids[idx].pos, hm);
            if (hDist <= consideredHomeDistSq) {
                if (hDist < closestHomeDist) {
                    boids[idx].hasHome = 1;
                    boids[idx].currentHome = hm;
                    closestHomeDist = hDist;
                    // debug
                    boids[idx].dir = boids[idx].pos;
                    boids[idx].boidsAround = int(sqDist(boids[idx].pos, hm));
                }
            }
        }
    }

    // Flock with boids
    if (numNeighbors != 0) {
        if (numFamily != 0) {
            // alignment
            avgVel /= numFamily;
            boids[idx].velocity += (avgVel - boids[idx].velocity) * boids[idx].matchingFactor;

            // cohesion
            avgCentre /= numFamily;
            boids[idx].velocity += (avgCentre - boids[idx].pos) * boids[idx].centeringFactor;
        }
        if (numStrangers != 0) {
            // alignment
            avgStrangerVel /= numStrangers;
            boids[idx].velocity += (avgStrangerVel - boids[idx].velocity) * boids[idx].matchingFactor * strangerFactor;

            // cohesion
            avgStrangerCentre /= numStrangers;
            boids[idx].velocity += (avgStrangerCentre - boids[idx].pos) * boids[idx].centeringFactor * strangerFactor;
        }

        // separation
        if (isBeingChased) {
            boids[idx].velocity += avgMoveFlee * boids[idx].avoidFactor;
        } else if (isInPursuit) {
            if (isInChasing) {
                // chase closest target only
                avgMoveAtt = -(boids[idx].pos - closestPrey) * boids[idx].goalWeight * boids[idx].scale.x;
            }
            boids[idx].velocity += avgMoveAtt * boids[idx].avoidFactor;
        }
        boids[idx].velocity += avgMove * boids[idx].avoidFactor;
        boids[idx].velocity += avgStrangerMove * boids[idx].avoidFactor * strangerFactor;
    }

    if (boids[idx].hasHome == 1 && !isInPursuit) {
        float homeFactor = 0.1;
        if (isBeingChased) {
            if (sqDist(boids[idx].pos, boids[idx].currentHome) >= sq(gridSize.x*2)) {
                homeFactor = 0.05;
            } else {
                return; // ignore home when being chased
            }
        } else if (sqDist(boids[idx].pos, boids[idx].currentHome) <= sq(restRange)) {
            homeFactor = 0.005; // slow down when at home
        } else {
            homeFactor = 0.0001;
        }
        
        // Flock around home
        boids[idx].velocity -= (boids[idx].pos - boids[idx].currentHome) * homeFactor;

        // Flock around player
        float playerFlockDist = 10;
        if (sqDist(boids[idx].pos, vec4(updateCentre, 0)) <= sq(playerFlockDist)) {
            boids[idx].velocity -= (boids[idx].pos - boids[idx].currentHome) * 0.01;
        }
    } else {
        // boids[idx].velocity += (boids[idx].pos - vec4(0)) * 0.0005; // drift away from centre
    }
}   

void limitSpeed(uint idx) {
    float tspeed = dot(boids[idx].velocity, boids[idx].velocity); // squared magnitude
    if ((tspeed < sq(boids[idx].min_speed))) {
        boids[idx].velocity *= 1.1;
    } else {
        float max_speed = boids[idx].max_speed * globalSpeedFactor;
        if (tspeed > sq(max_speed)) {
            boids[idx].velocity = normalize(boids[idx].velocity) * max_speed;
        }
    }
    checkAndReset(idx);
}

void constrainBounds(uint idx) {
    float tf = globalSpeedFactor;
    vec3 tg = gridSize;
    if (boids[idx].pos.x < -tg.x)
        boids[idx].velocity.x += tf;
    if (boids[idx].pos.x > tg.x)
        boids[idx].velocity.x -= tf;
    if (boids[idx].pos.y < boids[idx].bounds.x)
        boids[idx].velocity.y += tf;
    if (boids[idx].pos.y > boids[idx].bounds.y)
        boids[idx].velocity.y -= tf;
    if (boids[idx].pos.z < -tg.z)
        boids[idx].velocity.z += tf;
    if (boids[idx].pos.z > tg.z)
        boids[idx].velocity.z -= tf;
}

void update(uint idx) {
    checkAndReset(idx);
    boids[idx].lastVelocity = mix(boids[idx].lastVelocity, boids[idx].velocity, deltaTime * acc);
    boids[idx].pos += boids[idx].lastVelocity * deltaTime;
    boids[idx].pos.w = 0;
}

void process(uint idx) {
    // boids[idx].dir = normalize(boids[idx].velocity);
    constrainBounds(idx);
    move(idx);
    limitSpeed(idx);
    update(idx);
}

bool isFamily(uint idxa, uint idxb) {
    return boids[idxa].type == boids[idxb].type;
}

bool isNeutral(uint idxa, uint idxb) {
    return !isPredatorTo(idxa, idxb) && !isPreyTo(idxa, idxb);
}

bool isPredatorTo(uint idxa, uint idxb) {
    return boids[idxa].myPrey[boids[idxb].type] == 1;
}

bool isPreyTo(uint idxa, uint idxb) {
    return boids[idxa].myPredators[boids[idxb].type] == 1;
}

float getFearWeight(uint idxa, uint idxb) {
    // if (isPreyTo(idxa, idxb)) {
    //     return 5;
    // } else if (isPredatorTo(idxa, idxb) || isFamily(idxa, idxb)) {
    //     return 0;
    // } else {
    //     return max(((boids[idxb].scale / boids[idxa].scale) - boids[idxa].scale).x, 0.0f);
    // }
    return 5;
}

// Compute the squared distance between `a` and `b`. Use `glm::distance` for actual distance
float sqDist(vec4 a, vec4 b) {
    vec4 diff = a - b;
    return dot(diff, diff);
}

// uint flatten3(vec3 v) {
//     return v.x + v.y * gridSize.x + v.z * gridSize.x * gridSize.y;
// }

bool checkNan(vec3 v) {
    return any(isnan(v));
}
bool checkNan(vec4 v) {
    return any(isnan(v));
}
void checkAndReset(uint idx) {
    if (checkNan(boids[idx].velocity)) {
        resetVelocity(idx);
    }
    if (resetFlag) {
        boids[idx].pos = vec4(0);
    }
}
void resetVelocity(uint idx) {
    boids[idx].velocity = vec4(boids[idx].min_speed);
}
