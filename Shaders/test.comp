#version 460 core

layout (local_size_x = 1) in;

struct tdata {
    mat4 a;
    mat4 b;
    uint c;
    int padding_a;
    int padding_b;
    int padding_c;
};

// the maximum amount of keyframes allowed. 
// requires that skinned meshes be exported without sampling or that animation has less than 32 frames total
#define MAX_KEYFRAMES 32
#define MAX_JOINTS 16

// 64 + 64 + 512 + 512 + 512 + 128 + 16 = 1808 bytes
struct Animation {
    int boneIndex;                           // index of bone this animation applies to                              # 4
    float animDuration;                      // length of the animation in ticks                                     # 4
    mat4 relTransformation;                  // transformation relative to parent (aiNode->mTransformation)          # 4 * 4 * 4 = 64
    mat4 globalInvTransform;                 // global inverse transform of root node of mesh's skeleton             # 4 * 4 * 4 = 64
    vec4 positionKeys[MAX_KEYFRAMES];        // changes in position (first 3) and time of keys (last float)          # 4 * 4 * 32 = 512
    vec4 scalingKeys[MAX_KEYFRAMES];         // changes in scaling (first 3) and time of keys (last float)           # 4 * 4 * 32 = 512
    vec4 rotationKeys[MAX_KEYFRAMES];        // changes in rotation                                                  # 4 * 4 * 32 = 512
    float rotationKeysTimes[MAX_KEYFRAMES];  // times of rotation keys                                               # 4 * 32 = 128
    // vec2 an_padding;                         // padding                                                              # 4 * 2 = 8
};

// 64 + 64 + 4 + 64 + 8 = 204 bytes
struct BoneInfo {
    mat4 offsetMatrix;                       // inverse bind matrix for the bone                                     # 4 * 4 * 4 = 64
    mat4 currentTransformation;              // current transformation of the bone                                   # 4 * 4 * 4 = 64
    int ID;                                  // bone id                                                              # 4
    int children[MAX_JOINTS];                // ids of children bones                                                # 4 * 16 = 64
    // vec2 bi_padding;                         // padding                                                              # 4 * 2 = 8
    // int bi_padding2;                         // padding                                                              # 4 * 4 = 16
};

layout(std430, binding=0) buffer animData{
    Animation anims[];
};
layout(std430, binding=1) buffer bInfoData{
    BoneInfo binfos[];
};

layout (location = 0) uniform float timeSinceApplicationStarted;

mat4 makeMat4(vec4 a, vec4 b, vec4 c, vec4 d) {
    return mat4(
        a.x, b.x, c.x, d.x,
        a.y, b.y, c.y, d.y,
        a.z, b.z, c.z, d.z,
        a.w, b.w, c.w, d.w
    );
}

void main(){
    uint gid = gl_GlobalInvocationID.x;
    for (int i = 0; i < binfos.length(); i++) {
        float wrappedTime = mod(timeSinceApplicationStarted * 240, anims[i].animDuration);
        binfos[i].currentTransformation = mat4(wrappedTime);
    }
    // binfos[0].bi_padding = vec2(9)
}
